#! /usr/bin/env python3
#! -*- coding: utf-8 -*-
import ast
from src.modules.nodeParser import NodeParser

class Expr(NodeParser):
    def convert_BoolOp(self: Expr, nodes: ast.BoolOp) -> str: ...
    def convert_NamedExpr(self: Expr, nodes: ast.NamedExpr) -> str: ...
    def convert_BinOp(self: Expr, nodes: ast.BinOp) -> str: ...
    def convert_UnaryOp(self: Expr, nodes: ast.UnaryOp) -> str: ...
    def convert_Lambda(self: Expr, nodes: ast.Lambda) -> str: ...
    def convert_IfExp(self: Expr, nodes: ast.IfExp) -> str: ...
    def convert_Dict(self: Expr, nodes: ast.Dict) -> str: ...
    def convert_Set(self: Expr, nodes: ast.Set) -> str: ...
    def convert_ListComp(self: Expr, nodes: ast.ListComp) -> str: ...
    def convert_SetComp(self: Expr, nodes: ast.SetComp) -> str: ...
    def convert_DictComp(self: Expr, nodes: ast.DictComp) -> str: ...
    def convert_GeneratorExp(self: Expr, nodes: ast.GeneratorExp) -> str: ...
    def convert_Await(self: Expr, nodes: ast.Await) -> str: ...
    def convert_Yield(self: Expr, nodes: ast.Yield) -> str: ...
    def convert_YieldFrom(self: Expr, nodes: ast.YieldFrom) -> str: ...
    def convert_Compare(self: Expr, nodes: ast.Compare) -> str: ...
    def convert_Call(self: Expr, nodes: ast.Call) -> str: ...
    def convert_FormattedValue(self: Expr, nodes: ast.FormattedValue) -> str: ...
    def convert_JoinedStr(self: Expr, nodes: ast.JoinedStr) -> str: ...
    def convert_Constant(self: Expr, nodes: ast.Constant) -> str: ...
    def convert_Attribute(self: Expr, nodes: ast.Attribute) -> str: ...
    def convert_Subscript(self: Expr, nodes: ast.Subscript) -> str: ...
    def convert_Starred(self: Expr, nodes: ast.Starred) -> str: ...
    def convert_Name(self: Expr, nodes: ast.Name) -> str: ...
    def convert_List(self: Expr, nodes: ast.List) -> str: ...
    def convert_Tuple(self: Expr, nodes: ast.Tuple) -> str: ...
    def convert_Slice(self: Expr, nodes: ast.Slice) -> str: ...
